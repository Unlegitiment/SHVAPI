#include "internal_scaleform.h"
#include "..\Scaleform.h"
#include "E:\ScriptHookV\inc\natives.h"
#define MODE_LIMIT 64
void HC_CREATE_STAT_WALL(int handle, char* wallID, char* bgColour, int sfxId) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "CREATE_STAT_WALL");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(wallID);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(bgColour);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(sfxId);
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void HC_ADD_BKG_TO_WALL(int handle, char* wallID, int opacity, int moneyMesh) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "ADD_BACKGROUND_TO_WALL");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(wallID);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(opacity);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(moneyMesh);
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void ADD_MISS_RESULT(int handle, char* wallID, char* missionTextLbl, char* passFail, char* msgLabel) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "ADD_MISSION_RESULT_TO_WALL");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(wallID);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(missionTextLbl); //textlabel
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(passFail); //passFail
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(msgLabel); // msgLabel
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(TRUE); //isMsgraw
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(TRUE); //isPassFailRaw
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(TRUE); //isMissionTextRaw
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void HC_ADD_COMPLETE_MESS_TO_WALL(int handle, char* wallID, char* missionTextLbl, char* passFail, char* msgLabel) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "ADD_MISSION_RESULT_TO_WALL");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(wallID);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(missionTextLbl); //textlabel
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(passFail); //passFail
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(msgLabel); // msgLabel
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(TRUE); //isMsgraw
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(TRUE); //isPassFailRaw
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(TRUE); //isMissionTextRaw
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void HC_CREATE_STAT_TABLE(int handle, char* wallID, char* statID) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "CREATE_STAT_TABLE");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(wallID);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(statID);
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void HC_ADD_STAT_TO_WALL(int handle, char* wallID, char* statId, char* name, char* val, BOOL_t isTotalRow, BOOL_t isValTime, char* COLID) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "ADD_STAT_TO_TABLE");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(wallID);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(statId);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(name);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(val);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(TRUE);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(TRUE);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(isTotalRow);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(isValTime);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(COLID);
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void ADD_STAT_TABLE_TO_WALL(int handle, char* wallID, char* statId) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "ADD_STAT_TABLE_TO_WALL");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(wallID);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(statId);
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void SHOW_STAT_WALL(int handle, char* wallID) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_STAT_WALL");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(wallID);
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void CREATE_INCREMENTAL_CASH_ANIM(int handle, char* wallID, char* stepID) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "CREATE_INCREMENTAL_CASH_ANIMATION");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(wallID);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(stepID);
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void ADD_INCREMENTAL_CASH_WON_STEP(int handle, char* wallID, char* stepID, int startDol, int finishDol, char* topTxt, char* bottomTxt, char* handStat, BOOL_t handico, char* soundType) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "ADD_INCREMENTAL_CASH_WON_STEP");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(wallID);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(stepID);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(startDol); //startVal
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(finishDol); //finVal
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(topTxt);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(bottomTxt);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(handStat); // rightHandStat
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(handico); //rightHandIco
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(soundType);
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void ADD_INCREMENTAL_CASH_TO_WALL(int handle, char* wallID, char* stepID) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "ADD_INCREMENTAL_CASH_ANIMATION_TO_WALL");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(wallID);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(stepID);
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void ADD_JP(int handle, char* wallID, int pts, BOOL_t xAlign) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "ADD_JOB_POINTS_TO_WALL");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(wallID);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(pts);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(xAlign);
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void ADD_RP_AND_BAR(int handle, char* wallID, int repGained, int startRep, int minRepForRank, int maxRepForRank, int currentRank, int nextRank, char* rnk1txt, char* ranktxt2) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(wallID); // wallid
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(repGained); //repGain
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(startRep); //start
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(minRepForRank);  //minRepForRank
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(maxRepForRank);  //maxRepForRank
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(currentRank);  //currentRank
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(nextRank);  //nextRank
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(rnk1txt); // rnktxt1
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(ranktxt2);// rnktxt2
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
//IMPORTANT
void ADD_CASH_DEDUCTION(int handle, char* wallID, char* title, char* desc, int val) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "ADD_CASH_DEDUCTION");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(wallID);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(title);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(desc);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(val); 
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void ADD_CASH_WON_TO_WALL(int handle, char* wallID, char* statLbl, int finVal, int startVal, BOOL_t xAlign, BOOL_t isRawTxt) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "ADD_CASH_WON_TO_WALL");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(wallID);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(statLbl);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(startVal); // reg
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(finVal);//potent?
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(xAlign);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(isRawTxt);
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void ADD_CASH_TO_WALL(int handle, char* wallID, float val, BOOL_t xAlign) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "ADD_CASH_TO_WALL");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(wallID);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(val);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(xAlign);
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void CLEANUP(int handle, char* wallID) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "CLEANUP");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(wallID);
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
int GET_TIME(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "GET_TOTAL_WALL_DURATION");
	int retHandle = GRAPHICS::END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE();
	while (!GRAPHICS::IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY(retHandle)) WAIT(0);
	int time = GRAPHICS::GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(retHandle);
	return time;
}
#define SCL_LIMIT 3
typedef struct {
	Scaleform scl[SCL_LIMIT];
	int startCash, endCash, currentRank, nextRank, minRPforNext, maxRPforNext, rpGained;
	char wallID[MODE_LIMIT / 4], firstLine[MODE_LIMIT/4], largeTxt[MODE_LIMIT/4], deathTxt[MODE_LIMIT/2];
	CelebrationTypes types;
	int opacity;
}HeistCelebration;

HeistCelebHandle* heistceleb_Create(char firstLine[MODE_LIMIT / 4], char largeText[MODE_LIMIT / 4], char deathText[MODE_LIMIT / 2], CelebrationTypes type, int opacity, int startMoney, int endMoney, int startRank, int endRank) {
	if (firstLine == NULL) firstLine = "NULL";
	if (largeText == NULL) largeText = "NULL";
	if (deathText == NULL) deathText = "NULL";

	HeistCelebration* celeb = (HeistCelebration*)malloc(sizeof(HeistCelebration));
	if (celeb == NULL) return NULL;
	//Pre-init vals.
	strncpy(celeb->scl[0].name, "HEIST_CELEBRATION\0", strnlen("HEIST_CELEBRATION\0", 64));
	strncpy(celeb->scl[1].name, "HEIST_CELEBRATION_BG\0", strnlen("HEIST_CELEBRATION_BG\0", 64));
	strncpy(celeb->scl[2].name, "HEIST_CELEBRATION_FG\0", strnlen("HEIST_CELEBRATION_FG\0", 64));
	strncpy(celeb->wallID, "OUTRO", 16);

	strncpy(celeb->firstLine, firstLine, 16);
	strncpy(celeb->largeTxt, largeText, 16);
	strncpy(celeb->deathTxt, deathText, 32);
	celeb->opacity = opacity;
	celeb->types = type;
	celeb->currentRank = startRank;
	celeb->nextRank = endRank;
	celeb->startCash = startMoney;
	celeb->endCash = endMoney;

	return (CelebHandle*)celeb;
}
void heistceleb_Destroy(HeistCelebHandle* inst) {
	HeistCelebration* hc = (HeistCelebration*)inst;
	free(hc);
}
void heistceleb_Draw(HeistCelebHandle* inst) {
	HeistCelebration* h = (HeistCelebration*)inst;
	h->scl[2].handle = GRAPHICS::REQUEST_SCALEFORM_MOVIE("MP_CELEBRATION_BG");
	h->scl[1].handle = GRAPHICS::REQUEST_SCALEFORM_MOVIE("MP_CELEBRATION_FG");
	h->scl[0].handle = GRAPHICS::REQUEST_SCALEFORM_MOVIE("MP_CELEBRATION");
	for (int i = 0; i < 3; i++) {
		while (!GRAPHICS::HAS_SCALEFORM_MOVIE_LOADED(h->scl[i].handle)) WAIT(0);
		CLEANUP(h->scl[i].handle, h->wallID);
		HC_CREATE_STAT_WALL(h->scl[i].handle, h->wallID, "HUD_COLOUR_HSHARD", 100);
		ADD_MISS_RESULT(h->scl[i].handle, h->wallID, "HEIST", "PASSED", "");
		HC_CREATE_STAT_TABLE(h->scl[i].handle, h->wallID, "table");
		HC_ADD_STAT_TO_WALL(h->scl[i].handle, h->wallID, "table", "Player1", "PLATNUM", FALSE, FALSE, "HUD_COLOUR_PLATINUM");
		HC_ADD_STAT_TO_WALL(h->scl[i].handle, h->wallID, "table", "Player2", "GOLD", FALSE, FALSE, "HUD_COLOUR_GOLD");
		HC_ADD_STAT_TO_WALL(h->scl[i].handle, h->wallID, "table", "Player3", "SILVER", FALSE, FALSE, "HUD_COLOUR_SILVER");
		HC_ADD_STAT_TO_WALL(h->scl[i].handle, h->wallID, "table", "Player4", "BRONZE", FALSE, FALSE,  "HUD_COLOUR_BRONZE");
		ADD_STAT_TABLE_TO_WALL(h->scl[i].handle, h->wallID, "table");
		CREATE_INCREMENTAL_CASH_ANIM(h->scl[i].handle, h->wallID, "ID");
		ADD_INCREMENTAL_CASH_WON_STEP(h->scl[i].handle, h->wallID, "ID", 75000, 360000, "TOP", "BOTTOM", "HANDSTAT", 3, "NULL");
		ADD_INCREMENTAL_CASH_WON_STEP(h->scl[i].handle, h->wallID, "ID", 75000, 360000, "TOP", "BOTTOM", "HANDSTAT", 2, "NULL");
		ADD_INCREMENTAL_CASH_TO_WALL(h->scl[i].handle, h->wallID, "ID");
		ADD_RP_AND_BAR(h->scl[i].handle, h->wallID, 200, 1500, 16, 17, 1500, 2000, "RNK", "RNK2");



		HC_ADD_BKG_TO_WALL(h->scl[i].handle, h->wallID, h->opacity, h->types);
		SHOW_STAT_WALL(h->scl[i].handle, h->wallID);
	}
	int startTime = MISC::GET_GAME_TIMER();
	int time = GET_TIME(h->scl[0].handle);
	int endTime = startTime + time;

	while (MISC::GET_GAME_TIMER() < endTime) {
		GRAPHICS::DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED(h->scl[2].handle, h->scl[1].handle, 255, 255, 255, 100);
		GRAPHICS::DRAW_SCALEFORM_MOVIE_FULLSCREEN(h->scl[0].handle, 255, 255, 255, 255, 0);
		HUD::HIDE_HUD_AND_RADAR_THIS_FRAME();
		//PAD::DISABLE_ALL_CONTROL_ACTIONS(0);
		WAIT(0);
	}
	WAIT(0);
	for (int i = 0; i < 3; i++) {
		GRAPHICS::SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED(&h->scl[i].handle);
	}
	heistceleb_Destroy(inst);
	return;
}