#include "..\Scaleform.h"
#include "internal_scaleform.h"
/*
* MP_BIG_MESSAGE_FREEMODE()
INITIALISE(mc)
createMessageNG(linkageID, args)
SET_SHARD_BACKGROUND_TARGET_HEIGHT(numStats)
SET_SHARD_BACKGROUND_HEIGHT(height)
ROLL_DOWN_BACKGROUND()
ROLL_UP_BACKGROUND()
UPDATE_MESSAGE(msgText)
createMessage(linkageID, args)
setBigMessageOutline(bigTextStr)
SET_RESPAWN_BAR_PERCENTAGE(precent)
FLASH_RESPAWN_BAR(duration)
UPDATE_STRAP_MESSAGE(msgText)
ADD_TXD_REF_RESPONSE(textureDict, uniqueID, success)
CLEAR_CREW_RANKUP_MP_MESSAGE()
SHOW_BUSTED_MP_MESSAGE()
SHOW_WASTED_MP_MESSAGE()
SHOW_RANKUP_MP_MESSAGE(bigText)
SHOW_CREW_RANKUP_MP_MESSAGE(titleStr, msgStr, rankNumber, emblemTXD, emblemTXN, alpha)
SHOW_LOCKED_UP_MP_MESSAGE()
SHOW_MISSION_END_MP_MESSAGE()
SHOW_MISSION_FAILED_MP_MESSAGE()
SHOW_MISSION_PASSED_MESSAGE()
SHOW_WEAPON_PURCHASED(bigMessage, weaponName, weaponHash, weaponDescription, alpha)
SHOW_PLANE_MESSAGE(bigMessage, planeName, planeHash)
SHOW_TERRITORY_CHANGE_MP_MESSAGE()
SHOW_MP_MESSAGE_TOP()
SHOW_CENTERED_MP_MESSAGE_LARGE()
SHOW_CENTERED_MP_MESSAGE()
SHOW_CENTERED_TOP_MP_MESSAGE()
SHOW_BIG_MP_MESSAGE_WITH_STRAP_AND_RANK()
SHOW_BIG_MP_MESSAGE_WITH_STRAP()
SHOW_BIG_MP_MESSAGE()
SHOW_SHARD_CENTERED_MP_MESSAGE()
SHOW_SHARD_CENTERED_MP_MESSAGE_LARGE()
SHOW_SHARD_WASTED_MP_MESSAGE(bigTxt, msgTxt, colId, someUnusedBoolean, darkenBackground)
SHOW_SHARD_CENTERED_TOP_MP_MESSAGE()
SHOW_SHARD_RANKUP_MP_MESSAGE()
SHOW_SHARD_CREW_RANKUP_MP_MESSAGE()
DO_SHARD(args, isCenter, colID, shardColID, useLargeShard)
getFontSizeFit(gamerName, fontSize, widthToFit)
parseForGamerTagTitleFonts(tf, str, stdPtSize)
colourSwitch()
colourSwitchAnim()
SHARD_SET_TEXT(bigText, msgText, colID)
SHARD_ANIM_DELAY(delayTime)
SHARD_ANIM_OUT(colID, animTime, textColourId)
SET_RANK_ICON_RGB(r, g, b)
playIconAnimation(iconText)
TRANSITION_OUT(duration)
getStringSize(str)
RESET_MOVIE()
OVERRIDE_Y_POSITION(newYPosition)
TRANSITION_IN(duration)
TRANSITION_UP(duration, preventAutoExpansion)
showMessageAfterTransitionUp()
TRANSITION_DOWN(duration)
showStrapMessage()
transitionUpComplete()
saveStrapStateOnAnimate()
debug()
*/

void __MPBMF_SHOW_BUSTED_MP_MESSAGE(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_BUSTED_MP_MESSAGE");
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_WASTED_MP_MESSAGE(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_WASTED_MP_MESSAGE");
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_RANKUP_MP_MESSAGE(int handle, char* bigText) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_RANKUP_MP_MESSAGE");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(bigText);
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_CREW_RANKUP_MP_MESSAGE(int handle, char* titleStr, char* msgStr, int rankNumber, char* emblemTXD, char* emblemTXN, int alpha) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_CREW_RANKUP_MP_MESSAGE");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(titleStr);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(msgStr);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(rankNumber);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(emblemTXD);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(emblemTXN);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(alpha);
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_LOCKED_UP_MP_MESSAGE(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_LOCKED_UP_MP_MESSAGE");
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_MISSION_END_MP_MESSAGE(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_MISSION_END_MP_MESSAGE");
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_MISSION_FAILED_MP_MESSAGE(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_MISSION_FAILED_MP_MESSAGE");
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_MISSION_PASSED_MESSAGE(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_MISSION_PASSED_MESSAGE");
	GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("M_FB4P3_P");//0
	GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
	GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("M_FB4P3");//1
	GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(100);//2
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(1);//3
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(0);//4
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(1);//5
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_WEAPON_PURCHASED(int handle, char* bigMsg, char* weaponName, int weaponHash, char* weaponDesc, int alpha) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_WEAPON_PURCHASED");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(bigMsg);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(weaponName);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(weaponHash);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(weaponDesc);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(alpha);
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_PLANE_MESSAGE(int handle, char* bigMessage, char* planeName, int planeHash) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_PLANE_MESSAGE");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(bigMessage);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(planeName);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(planeHash);
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_TERRITORY_CHANGE_MP_MESSAGE(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_TERRITORY_CHANGE_MP_MESSAGE");
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_MP_MESSAGE_TOP(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_MP_MESSAGE_TOP");
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_CENTERED_MP_MESSAGE_LARGE(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_CENTERED_MP_MESSAGE_LARGE");
	GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("INSTALL_COMP");
	GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_CENTERED_MP_MESSAGE(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_CENTERED_MP_MESSAGE");

	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_CENTERED_TOP_MP_MESSAGE(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_CENTERED_TOP_MP_MESSAGE");
	GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("INSTALL_COMP");
	GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_BIG_MP_MESSAGE_WITH_STRAP_AND_RANK(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_BIG_MP_MESSAGE_WITH_STRAP_AND_RANK");
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_BIG_MP_MESSAGE_WITH_STRAP(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_BIG_MP_MESSAGE_WITH_STRAP");
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_BIG_MP_MESSAGE(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_BIG_MP_MESSAGE");
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_SHARD_CENTERED_MP_MESSAGE(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_SHARD_CENTERED_MP_MESSAGE");
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_SHARD_CENTERED_MP_MESSAGE_LARGE(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_SHARD_CENTERED_MP_MESSAGE_LARGE");
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_SHARD_WASTED_MP_MESSAGE(int handle, char* bigTxt, char* msgTxt, HudColour colID, BOOL_t unusedBool, BOOL_t darkenBackground) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_SHARD_WASTED_MP_MESSAGE");
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(bigTxt);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(msgTxt);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(colID);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(unusedBool);
	GRAPHICS::SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(darkenBackground);
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_SHARD_CENTERED_TOP_MP_MESSAGE(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_SHARD_CENTERED_TOP_MP_MESSAGE");
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_SHARD_RANKUP_MP_MESSAGE(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_SHARD_RANKUP_MP_MESSAGE");
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
void __MPBMF_SHOW_SHARD_CREW_RANKUP_MP_MESSAGE(int handle) {
	GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_SHARD_CREW_RANKUP_MP_MESSAGE");
	GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
}
#define HASH_BUFF 256
#define TITLE_SEQ_BUFF 16
#define BASE_TEXT_BUFF 64
typedef enum {
	BIGMSG_DT_BASE = 0,
	BIGMSG_DT_PLANE = 1,
	BIGMSG_DT_WEAPON = 2
}BIGMSG_DrawType;

typedef struct {
	Scaleform scl;
	char bigText[TITLE_SEQ_BUFF]; //16 char
	char smallText[BASE_TEXT_BUFF];
	BIGMSG_DrawType drawType;
	struct __plane_internal__{
		char planeName[BASE_TEXT_BUFF];
		VehicleHash hash; //256 char
	}PLANE;
	struct __weap_internal__{
		char weaponName[BASE_TEXT_BUFF];
		int weaponHash; //256 char
		char weaponDesciption[BASE_TEXT_BUFF];
	}WEAPON;
}MP_BIG_MESSAGE_FREEMODE;

BigMsgHandle* BIGMSG_Create(char* bigText, char* msgTxt) {
	MP_BIG_MESSAGE_FREEMODE* ptr = (MP_BIG_MESSAGE_FREEMODE*)malloc(sizeof(MP_BIG_MESSAGE_FREEMODE));
	if (ptr == NULL) return NULL;
	__SCL_INIT__(&ptr->scl, "MP_BIG_MESSAGE_FREEMODE", __SCL_REQUEST__("MP_BIG_MESSAGE_FREEMODE", TYPE_REQUEST_NORMAL));
	
	strncpy(ptr->bigText, bigText, TITLE_SEQ_BUFF- 2);
	ptr->bigText[TITLE_SEQ_BUFF - 1]  = '\0';
	strncpy(ptr->smallText, msgTxt, BASE_TEXT_BUFF - 2);
	ptr->smallText[BASE_TEXT_BUFF - 1] = '\0';

	ptr->drawType = BIGMSG_DT_BASE;
	return (BigMsgHandle*)ptr;
}

void BIGMSG_ApplyWeapon(BigMsgHandle* handle, char* weapName, int weapHash, char* weapDesc) {
	if (handle == NULL) return;
	MP_BIG_MESSAGE_FREEMODE* ptr = (MP_BIG_MESSAGE_FREEMODE*)handle;
	ptr->drawType = BIGMSG_DT_WEAPON;
	ptr->WEAPON.weaponHash = weapHash;

	strncpy(ptr->WEAPON.weaponName, weapName, TITLE_SEQ_BUFF - 2);
	ptr->WEAPON.weaponName[TITLE_SEQ_BUFF - 1] = ' \0';

	strncpy(ptr->WEAPON.weaponDesciption, weapDesc, BASE_TEXT_BUFF - 2);
	ptr->WEAPON.weaponDesciption[BASE_TEXT_BUFF - 1] = '\0';

	return;
}
void BIGMSG_ApplyPlane(BigMsgHandle* handle, char* planeName, VehicleHash planeHash) {
	if (handle == NULL) return;
	MP_BIG_MESSAGE_FREEMODE* ptr = (MP_BIG_MESSAGE_FREEMODE*)handle;
	if (ptr->smallText != NULL) {
		strncpy(ptr->smallText, "", BASE_TEXT_BUFF - 2);
		ptr->smallText[BASE_TEXT_BUFF - 1] = '\0';
	}
	ptr->PLANE.hash = planeHash;
	ptr->drawType = BIGMSG_DT_PLANE;
	return;
}

void BIGMSG_Tick(const BigMsgHandle* handle){
	if (handle == NULL) return;
	MP_BIG_MESSAGE_FREEMODE* ptr = (MP_BIG_MESSAGE_FREEMODE*)handle;
	switch (ptr->drawType) {
	case BIGMSG_DT_BASE:
		break;
	case BIGMSG_DT_PLANE:
		__MPBMF_SHOW_PLANE_MESSAGE(ptr->scl.handle, (char*)ptr->bigText, (char*)ptr->PLANE.planeName, ptr->PLANE.hash);
		GRAPHICS::DRAW_SCALEFORM_MOVIE(ptr->scl.handle, 0.5F, 0.5F, 1, 1, 255, 255, 255, 255, 0);
		break;
	case BIGMSG_DT_WEAPON:
		__MPBMF_SHOW_WEAPON_PURCHASED(ptr->scl.handle, (char*)ptr->bigText, (char*)ptr->WEAPON.weaponDesciption, ptr->WEAPON.weaponHash, (char*)ptr->WEAPON.weaponName, 100 );
		GRAPHICS::DRAW_SCALEFORM_MOVIE(ptr->scl.handle, 0.5F, 0.5F, 1, 1, 255, 255, 255, 255, 0);
		break;
	}

}
void BIGMSG_Free(BigMsgHandle* handle) {
	if (handle == NULL) return;
	MP_BIG_MESSAGE_FREEMODE* ptr = (MP_BIG_MESSAGE_FREEMODE*)handle;


	free(handle);

}